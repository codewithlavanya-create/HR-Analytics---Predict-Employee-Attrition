{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f3ef8e3a-b1bb-4a55-8507-6cec63720e8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "âœ… Accuracy Score: 0.8277027027027027\n",
      "\n",
      "ðŸ“Š Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.91      0.90       249\n",
      "           1       0.45      0.38      0.41        47\n",
      "\n",
      "    accuracy                           0.83       296\n",
      "   macro avg       0.67      0.65      0.66       296\n",
      "weighted avg       0.82      0.83      0.82       296\n",
      "\n",
      "\n",
      "ðŸ§© Confusion Matrix:\n",
      " [[227  22]\n",
      " [ 29  18]]\n"
     ]
    }
   ],
   "source": [
    "# Import required libraries\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv(\"HR_Analytics.csv\")\n",
    "\n",
    "# Encode the target variable (Attrition: Yes/No â†’ 1/0)\n",
    "le = LabelEncoder()\n",
    "df['Attrition'] = le.fit_transform(df['Attrition'])  # Yes = 1, No = 0\n",
    "\n",
    "# Drop unique identifier columns if present\n",
    "if 'EmployeeNumber' in df.columns:\n",
    "    df.drop(columns=['EmployeeNumber'], inplace=True)\n",
    "\n",
    "# One-hot encode categorical features\n",
    "df_encoded = pd.get_dummies(df, drop_first=True)\n",
    "\n",
    "# Separate features and target\n",
    "X = df_encoded.drop('Attrition', axis=1)\n",
    "y = df_encoded['Attrition']\n",
    "\n",
    "# Train-test split (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the Decision Tree model\n",
    "model = DecisionTreeClassifier(max_depth=5, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Evaluate the model\n",
    "print(\"âœ… Accuracy Score:\", accuracy_score(y_test, y_pred))\n",
    "print(\"\\nðŸ“Š Classification Report:\\n\", classification_report(y_test, y_pred))\n",
    "print(\"\\nðŸ§© Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c3494f3-b0aa-44c3-9b35-d445af2345bc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
